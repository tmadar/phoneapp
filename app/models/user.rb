class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  # :token_authenticatable, :confirmable,
  # :lockable, :timeoutable and :omniauthable
  include CanCan::Ability
  
  AVAILABILITY = ["Yes", "No"]
  CONTACT = ["Email", "Text"]
  
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable

  # Setup accessible (or protected) attributes for your model
  attr_accessible :email, :password, :password_confirmation, :remember_me, :name,
                  :phone, :priority, :availability, :means_of_contact, :admin
  # attr_accessible :title, :body
  
  has_many :calls

  def toggle_availability!
    if not self.available? or self.availablity == nil
      self.availability = "Yes"
    else
      self.availability = "No"
    end
    self.save
  end
  
  def available?
    if self.availability != "Yes" and not locked?
      return false
    end
    return true
  end
  
  def self.available
    order("priority").where(:availability => "Yes")
  end
  
  def accept_call(call)
    if self.available?
      self.lock_agent
      # research how to make this URL be generated by a method like patch_agent_call_handler_url
      $twilio_client.account.calls.create(
        :from => "+16023888925",
        :to => "#{self.phone}",
        :url => "http://184.183.31.238:3000/call_handler/patch_agent.xml?call_id=#{call.id}",
        :method => "GET"
      )
    end
  end
  
  def self.delete_lock!
    $redis.del(*$redis.keys("agent:*"))
  end

  def lock_agent
    $redis.setex("agent:#{self.id}:locked", 600, "1")
  end
  
  def locked?
    $redis.exists("agent:#{self.id}:locked")
  end
  
  def unlock_agent
    $redis.del("agent:#{self.id}:locked")
  end
  
  # This method will synch Zendesk Users to Call App Users
  def self.synch_zendesk_users
    
  end
  
end
